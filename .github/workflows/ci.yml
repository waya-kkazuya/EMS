name: EMS CI Pipeline

on:
  pull_request:
    types: [opened, synchronize]
    branches:
      - main
    paths:
      - '**'
  workflow_dispatch:
env:
  DB_CONNECTION: mysql
  DB_HOST: 127.0.0.1
  DB_PORT: 3306
  DB_DATABASE: ems_testing
  DB_USERNAME: ems_testing
  DB_PASSWORD: password123
  APP_ENV: testing
  SESSION_DRIVER: file
  SESSION_LIFETIME: 120
  SESSION_DOMAIN: localhost
  SESSION_COOKIE: my_session_cookie
  SESSION_COOKIE_SECURE: false
  SESSION_HTTP_ONLY: true
  SANCTUM_STATEFUL_DOMAINS: localhost

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    services:
      db:
        image: mysql/mysql-server:8.0
        ports:
          - 3306:3306
        env:
          MYSQL_DATABASE: 'ems_testing'
          MYSQL_USER: 'ems_testing'
          MYSQL_PASSWORD: 'password123'
          MYSQL_ROOT_PASSWORD: 'password'
          MYSQL_ALLOW_EMPTY_PASSWORD: 1
        options: >-
          --health-cmd "mysqladmin ping"
          --health-start-period 30s
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v4

      - name: Setup PHP with composer v2
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.2
          tools: composer:v2
          extensions: xdebug

      - name: Cache Vendor
        id: cache-vendor
        uses: actions/cache@v4
        with:
          path: ./vendor
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Install Dependencies
        if: steps.cache-vendor.outputs.cache-hit != 'true'
        run: composer install --quiet --prefer-dist --no-progress --no-interaction --no-scripts --no-ansi

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      # - name: Cache npm dependencies
      #   id: cache-npm-dependencies
      #   uses: actions/cache@v4
      #   with:
      #     path: ~/.npm
      #     key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
      #     restore-keys: ${{ runner.os }}-npm-

      - name: Cache node_modules
        id: cache-node-modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/package-lock.json') }}
          restore-keys: ${{ runner.os }}-node-modules-

      - name: Install npm Dependencies
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: npm ci

      - name: Fix npm vulnerabilities
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: npm audit fix

      # - name: Cache build output
      #   id: cache-build-output
      #   uses: actions/cache@v4
      #   with:
      #     path: dist
      #     key: ${{ runner.os }}-build-${{ hashFiles('**/package-lock.json') }}
      #     restore-keys: ${{ runner.os }}-build-

      - name: Build Assets
        run: npm run build

      - name: Laravel Setting
        run: |
          cp .env.testing .env
          php artisan optimize
          git config --local core.fileMode false
          chmod -R 777 storage storage/logs bootstrap/cache
      
      - name: PHP Version
        run: php --version
      - name: Composer Version
        run: composer --version
      - name: Laravel Version
        run: php artisan --version
      - name: Composer Validate 
        run: composer validate

      - name: Wait for MySQL to be ready
        run: |
          echo "Waiting for MySQL to be ready..."
          for i in {1..60}; do
            mysqladmin ping -h 127.0.0.1 --silent && break
            echo "MySQL is unavailable - waiting..."
            sleep 1
          done

      - name: Generate Application Key
        run: php artisan key:generate

      - name: Clear Configuration Cache
        run: php artisan config:cache

      - name: Run Migrate
        run: php artisan migrate

      # - name: Run Tests
      #   run: php artisan test --testsuite=Feature || exit 0

      - name: Run Tests with Coverage
        run: |
          # php artisan config:clear
          php artisan test --testsuite=Feature --stop-on-failure --coverage-text --colors=never > storage/logs/coverage.log
          cat storage/logs/coverage.log

      - name: view laravel.log
        if: failure()
        run: cat storage/logs/laravel-$(date +'%Y-%m-%d').log
